#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cryptoapp:server');
var http = require('http');
let fs = require('fs');
let path = require('path');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

let allPeople = {};
var io = require('socket.io')(server);
io.on('connection',function(socket){

  console.log('new user connected');
  console.log("id is",socket.id);

  socket.on('sendMsgBroadcast',function(msg,username){
    socket.broadcast.emit('sendMsg', msg,username);
  })

  /////////////////////////////
  // for private chat

  socket.on('sendMsgTo',function(fromUsername, targetUsername, cipherText, iv, sessionKey_encrypted, signature){

    io.to(allPeople[targetUsername].socketid)
    .emit('sendMsgTo',fromUsername, cipherText, iv, sessionKey_encrypted, signature)
  })

  //////////////////////////

  socket.on('sendPersonalInfo', function(username, publicKeyED_buffer, publicKeySV_buffer, _certAsPemText){
   
    allPeople[username] = {
      socketid: socket.id,
      publicKeyED: publicKeyED_buffer,
      publicKeySV: publicKeySV_buffer,
      certAsPemText: _certAsPemText,      
    }


    let s = '/certs/' + username + '.pem';
    let fileName = path.join(__dirname+s)

    fs.writeFile(fileName, _certAsPemText, function(e){
      console.log(e);
    })

    socket.broadcast.emit('newUsername', username, publicKeyED_buffer, publicKeySV_buffer, _certAsPemText);
  })
  /////////////////////////////

});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
